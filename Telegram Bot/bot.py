from typing import List, Tuple
import telebot
from telebot import types
import os
from dotenv import load_dotenv
import requests
import pyproj
import haversine as hs
import re
import time

office_regex = r"‚úâÔ∏è\s([0-9]{5,6})\s\-\s(.*)\s-\s([0-9]{1,})"

load_dotenv()

bot = telebot.TeleBot(os.environ['TOKEN'], parse_mode="markdown")

def distance_between(point1: Tuple[float, float], point2: Tuple[float, float]):
    geod = pyproj.Geod(ellps='WGS84')
    lons = [point1[0], point2[0]]
    lats = [point1[1], point2[1]]
    return hs.haversine(point1, point2, unit=hs.Unit.METERS)

def main_menu():
    markup = types.ReplyKeyboardMarkup(row_width=1, one_time_keyboard=True)
    request_location_btn = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    request_address_btn = types.KeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")
    markup.add(request_location_btn, request_address_btn)
    return markup

def offices_list(loc: Tuple[float, float], office_list: List):
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø–æ —É–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–µ–º 5 –±–ª–∏–∂–∞–π—à–∏—Ö
    office_list.sort(key=lambda x: distance_between((float(x["latitude"]), float(x["longitude"])), (loc[0], loc[1])))
    office_list = office_list[:5]

    # –°–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–¥–µ–ª–µ–Ω–∏–π
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=False, row_width=1)
    for office in office_list:
        distance = int(distance_between( (float(office["latitude"]), float(office["longitude"])), (loc[0], loc[1]) ))
        markup.add(types.KeyboardButton(f"‚úâÔ∏è {office['postalCode']} - {office['addressSource']} - {distance} –º."))
    markup.add(types.KeyboardButton("–ù–∞–∑–∞–¥"))
    return markup

def is_address_reply(message):
    if message.reply_to_message:
        return message.reply_to_message.text == '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ'

@bot.message_handler(commands=['start', 'help'])
def welcome_message(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –±–ª–∏–∂–∞–π—à–∏–µ –æ—Ç–¥–µ–ª–µ–Ω–∏—è –ø–æ—á—Ç—ã. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", 
                    reply_markup=main_menu())

@bot.message_handler(content_types=['location'])
def location_handler(message):
    lat = message.location.latitude
    lon = message.location.longitude

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –æ—Ñ–∏—Å–æ–≤ —á–µ—Ä–µ–∑ –ê–ü–ò
    resp = requests.get('http://localhost:8000/get_offices', params={'latitude': lat, "longitude": lon, "radius": 5}).json()

    bot.send_message(message.chat.id, f"–ù–∞–π–¥–µ–Ω–æ {resp['totalCount']} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤. –ü–æ–∫–∞–∑–∞–Ω—ã 5 –±–ª–∏–∂–∞–π—à–∏—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", reply_markup=offices_list((lat, lon), resp['postOffices']))

@bot.message_handler(regexp="‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é")
def address_handler(message):
    force_reply = types.ForceReply()
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –≤ –æ—Ç–≤–µ—Ç –Ω–∞ –¥–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=force_reply)

@bot.message_handler(regexp="–ù–∞–∑–∞–¥")
def back_to_main_menu(message):
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=main_menu())

@bot.message_handler(func=is_address_reply)
def address_reply_handler(message):
    address = message.text

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ –∞–¥—Ä–µ—Å—É
    resp = requests.get(f"https://geocode-maps.yandex.ru/1.x/?apikey={os.environ['YANDEX_API_KEY']}",
                        params={"geocode": address, "format": "json"}).json()
    print(resp)
    try:
        loc_str = resp["response"]["GeoObjectCollection"]["featureMember"][0]["GeoObject"]["Point"]["pos"]
        lon, lat = float(loc_str.split()[0]), float(loc_str.split()[1])
    except Exception:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–¥—Ä–µ—Å–µ", reply_markup=main_menu())
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–∫–∏ –æ—Ñ–∏—Å–æ–≤ —á–µ—Ä–µ–∑ –ê–ü–ò –ø–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
    resp = requests.get('http://localhost:8000/get_offices', params={'latitude': lat, "longitude": lon, "radius": 5}).json()
    bot.send_message(message.chat.id, f"–ù–∞–π–¥–µ–Ω–æ {resp['totalCount']} –æ—Ç–∫—Ä—ã—Ç—ã—Ö –æ—Ç–¥–µ–ª–µ–Ω–∏–π –≤ —Ä–∞–¥–∏—É—Å–µ 5 –∫–∏–ª–æ–º–µ—Ç—Ä–æ–≤. –ü–æ–∫–∞–∑–∞–Ω—ã 5 –±–ª–∏–∂–∞–π—à–∏—Ö. –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.", reply_markup=offices_list((lat, lon), resp['postOffices']))

@bot.message_handler(regexp=office_regex)
def office_click_handler(message):
    postal_code = int(re.match(office_regex, message.text).group(1))
    j = requests.get('http://localhost:8000/get_office_info', params={"postal_code": postal_code, "local_time": int(time.time())}).json()
    message_output = f"‚úâÔ∏è  –û—Ç–¥–µ–ª–µ–Ω–∏–µ –ø–æ—á—Ç—ã {j['postalCode']} \n"
    message_output += f"–ê–¥—Ä–µ—Å: {j['addressSource']} \n\n"
    message_output += f"üìÖ –ò–º–µ–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º: \n\n"
    message_output += f"–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫: {'–ó–∞–∫—Ä—ã—Ç–æ' if not j['workingHours'][0]['beginWorkTime'] else j['workingHours'][0]['beginWorkTime'] + ' - ' +  j['workingHours'][0]['endWorkTime']} \n" 
    message_output += f"–í—Ç–æ—Ä–Ω–∏–∫: {'–ó–∞–∫—Ä—ã—Ç–æ' if not j['workingHours'][1]['beginWorkTime'] else j['workingHours'][1]['beginWorkTime'] + ' - ' +  j['workingHours'][1]['endWorkTime']}  \n" 
    message_output += f"–°—Ä–µ–¥–∞: {'–ó–∞–∫—Ä—ã—Ç–æ' if not j['workingHours'][2]['beginWorkTime'] else j['workingHours'][2]['beginWorkTime'] + ' - ' +  j['workingHours'][2]['endWorkTime']}  \n" 
    message_output += f"–ß–µ—Ç–≤–µ—Ä–≥: {'–ó–∞–∫—Ä—ã—Ç–æ' if not j['workingHours'][3]['beginWorkTime'] else j['workingHours'][3]['beginWorkTime'] + ' - ' +  j['workingHours'][3]['endWorkTime']} \n" 
    message_output += f"–ü—è—Ç–Ω–∏—Ü–∞: {'–ó–∞–∫—Ä—ã—Ç–æ' if not j['workingHours'][4]['beginWorkTime'] else j['workingHours'][4]['beginWorkTime'] + ' - ' +  j['workingHours'][4]['endWorkTime']}  \n" 
    message_output += f"–°—É–±–±–æ—Ç–∞: {'–ó–∞–∫—Ä—ã—Ç–æ' if not j['workingHours'][5]['beginWorkTime'] else j['workingHours'][5]['beginWorkTime'] + ' - ' +  j['workingHours'][5]['endWorkTime']}  \n" 
    message_output += f"–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ: {'–ó–∞–∫—Ä—ã—Ç–æ' if not j['workingHours'][6]['beginWorkTime'] else j['workingHours'][6]['beginWorkTime'] + ' - ' +  j['workingHours'][6]['endWorkTime']} \n" 
    
    lunches = set()
    for hours in j['workingHours']:
        if hours["beginWorkTime"] and hours["lunches"]:
            lunches.add(hours["lunches"][0]["beginLunchTime"] + '-' + hours["lunches"][0]["endLunchTime"])
    if len(lunches) == 1:        
        message_output += f"\n‚è≥ –ü–µ—Ä–µ—Ä—ã–≤ {list(lunches)[0]}\n"
    
    location_msg = bot.send_location(message.chat.id, j["latitude"], j["longitude"], reply_to_message_id=message.id)
    bot.send_message(message.chat.id, message_output, reply_to_message_id=location_msg.id)

@bot.message_handler(func=lambda x: True)
def message_black_hole(message):
    bot.send_message(message.chat.id, "–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –±—ã–ª–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu())

bot.infinity_polling()